Just storing notes on basic Git commands and what to do in certain situations.

CREATING COMMITS:

$ git init                // Initializes the local git repository

$ git status              // Check the status of the working tree, so we can see what changes have been made

$ git add <file name>     // Adds files to index, we can add as many files as we like before committing

$ git add <folder>/       // Adds the entire folder to the staging area, converts changes from working area to staging area

$ git add .               // Adds everything in the directory we are in to the staging area

$ git commit -m "msg"     // Commit changes takes all the changes from the staging area and puts it into the commit history of the local repository along with a message to explain what the changes are

$ git commit -m "msg" --amend       // Updates the previous commit instead of making a new commit, replaces the latest commit


LOG COMMANDS:

$ git log                 // Allow us to see the commit history from the current branch

$ git log --all           // Shows all the commits from all branches

$ git log --all --graph   // Visualize the working tree and see all the branches


CONFIGURE NAME AND EMAIL FOR COMMITS:

$ git config --global user.name "Your Name"       // Configures and stores your name so that information shows up when you are making commits

$ git config --global user.email "Email@gmail.com"       // Stores your email so that shows up when you make commits


RESETTING AND REMOVING CHANGES:

$ git reset <file name>   // Brings a file back from the staging area to the working area

$ git reset folder/       // Resets the entire folder and brings it from the staging area back to the working area

$ git reset .             // Resets everything in the directory the command line is pointing to

$ git checkout -- <file>  // Removes any changes you have made from the working area

$ git checkout -- <folder>/   // Removes any changes for an entire folder

$ git checkout -- .       // Removes all changes you have made


VIEWING PREVIOUS COMMITS:

$ git checkout <commit hash>      // Allows you to view a previous commit

$ git checkout <branch>   // View the latest commit on the branch


RESTORING A PREVIOUS COMMIT:

$ git checkout <hash or branch> <file>    // Restores the code in the file back to its previous commit

$ git checkout <hash or branch> <folder>/       // Restores all the files in a folder to the previous commit

$ git checkout <hash or branch> .         // Restores all files in the project


CREATING SHORTCUTS, IGNORING FILES, AND REMOVING GIT

$ git config --global alias.shortcut <command>    // Creates a shortcut for a command

.gitignore files      // List the files and folders you don't want Git to track in here

$ rm -rf .git         // Removes git from the project


UPLOADING TO GITHUB COMMANDS:

$ git remote add <remote_name> <url>      // Connects the local repository to the remote repository and assigns a name for the link. We usually use origin for the name

$ git remote          // Lists all the remote repositories that are linked

$ git remote -v       // Lists all the remote repositories in greater detail

$ git remote remove <remote_name>       // Removes the connection between a local and remote repository

$ git config -- global credential.username <username>       // Configures your GitHub username so you can access your repositories

$ git push <remote_name> <branch>       // Uploads the branch from your local repository to your remote repository

$ git branch          // Lists all available branches

$ git push origin main --set-upstream   // Sets up a shortcut that allows you to just type "git push" and Git will automatically push the main branch to origin

